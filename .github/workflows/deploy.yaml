name: Deployment

on:
  push:
    branches:
      - main
      - releases/release*
  pull_request:

jobs:
  sync-secrets:
    name: üîê Decrypt & Sync Secrets (SOPS)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request' && (startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/releases/release'))
    permissions:
      contents: read

    steps:
      - name: üß© Checkout repository
        uses: actions/checkout@v4

      - name: üîç Check for encrypted secrets file
        id: has_secrets
        run: |
          if [ -f "secrets/client/secrets.enc.yaml" ]; then
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: ‚öôÔ∏è Setup SOPS
        if: steps.has_secrets.outputs.found == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg curl
          curl -L "https://github.com/getsops/sops/releases/download/v3.11.0/sops-v3.11.0.linux.amd64" -o /usr/local/bin/sops
          chmod +x /usr/local/bin/sops
          curl -L "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64" -o /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: üîë Import GPG Private Key
        if: steps.has_secrets.outputs.found == 'true'
        env:
          SOPS_GPG_PRIVATE_KEY: ${{ secrets.SOPS_GPG_PRIVATE_KEY }}
        run: |
          if [ -z "${SOPS_GPG_PRIVATE_KEY:-}" ]; then
            echo "‚ùå Missing SOPS_GPG_PRIVATE_KEY secret!" >&2
            exit 1
          fi
          echo "üîë Importing GPG private key..."
          echo "$SOPS_GPG_PRIVATE_KEY" > /tmp/private.key
          gpg --batch --import /tmp/private.key
          echo "‚úÖ GPG setup complete"

      - name: üîì Decrypt secrets using SOPS
        if: steps.has_secrets.outputs.found == 'true'
        run: |
          mkdir -p secrets/client
          echo "üîì Decrypting secrets..."
          sops --decrypt secrets/client/secrets.enc.yaml > secrets/client/secrets.dec.yaml
          echo "‚úÖ Secrets decrypted successfully"

      - name: üßæ Convert YAML ‚Üí .env
        if: steps.has_secrets.outputs.found == 'true'
        run: |
          echo "üîÅ Converting YAML to .env..."
          sudo apt-get update && sudo apt-get install -y yq
          yq eval '. | to_entries | .[] | "\(.key)=\(.value)"' secrets/client/secrets.dec.yaml > secrets/client/secrets.env
          echo "‚úÖ Converted secrets to .env format"

      - name: üì¶ Upload decrypted env file for deploy job
        if: steps.has_secrets.outputs.found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: decrypted-env
          path: secrets/client/secrets.env

  deploy:
    needs: [sync-secrets]
    name: üöÄ Deploy to Server
    runs-on: ubuntu-latest
    container:
      image: node:20
    permissions:
      contents: read
      checks: write
      pull-requests: write

    steps:
      - name: üß© Checkout code
        uses: actions/checkout@v4

      - name: üì• Download decrypted env
        uses: actions/download-artifact@v4
        with:
          name: decrypted-env
          path: secrets/client

      - name: üå± Load environment variables
        shell: bash
        run: |
         echo "Loading environment variables..."
         while IFS='=' read -r key value; do
         # skip empty lines or comments
         [[ -z "$key" || "$key" =~ ^# ]] && continue
         echo "$key=$value" >> $GITHUB_ENV
         done < secrets/client/secrets.env
         echo "‚úÖ Environment variables loaded globally"

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üèóÔ∏è Build App
        run: npm run build

      - name: üßπ Run Linter
        run: npm run lint

      - name: üîç Check for app folder changes
        id: changes
        run: |
          CHANGED=$(git diff --name-only ${{ github.sha }}^ ${{ github.sha }} | grep '^app/' || true)
          if [ -n "$CHANGED" ]; then
            echo "deploy=true" >> $GITHUB_ENV
            echo "‚úÖ Changes found in app/: $CHANGED"
          else
            echo "deploy=false" >> $GITHUB_ENV
            echo "‚ÑπÔ∏è No changes in app/"
          fi

      - name: üåê Deploy Preview (Pull Request)
        if: github.event_name == 'pull_request'
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_SETUPATI_SCHOOL_APP }}
          projectId: setupati-school-app
          channelId: pr-${{ github.event.pull_request.number }}

      - name: üöÄ Deploy Live
        if: github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/releases/release'))
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_SETUPATI_SCHOOL_APP }}
          projectId: setupati-school-app
          channelId: live

      - name: üõ†Ô∏è Deploy Backend to Render
        if: env.deploy == 'true' && github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/releases/release'))
        env:
          RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        run: |
          echo "üöÄ Deploying backend to Render..."
          curl -X POST "$RENDER_DEPLOY_HOOK_URL"
